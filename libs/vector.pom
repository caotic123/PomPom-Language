import libs/nat.

Static vector : ~ * ~> (x : Nat) *.
Static nil : (A : *) (vector A 0).
Static cons : (A : *) (x : Nat) (y : A) (H : {(vector A x) :: |nil |cons}) (vector A (+1 x)).

Vector
 | A n :: (A : *) ~> ~ Nat ~> * => {(vector A n) :: |nil |cons}.

concat 
 | A n m vec vec2 :: (A : *) (n : Nat) (m : Nat) (vec : (Vector A n)) (vec : (Vector A m)) ~> (Vector A (+ n m)) => [vec of (Vector A (+ n m))
      |(cons _ len head tail) => 
        ((cons A (+ len m) head (concat A len m tail vec2)) :: (Vector A (+ (+1 len) m)))
      |(nil _) => (vec2 :: (Vector A (+ 0 m)))
  ].