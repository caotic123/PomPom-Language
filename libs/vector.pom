import libs/nat.

Static vector : ~ * ~> (x : Nat) *.
Static nil : (A : *) (vector A Z).
Static cons : (A : *) (x : Nat) (y : A) (H : {(vector A x) :: |nil |cons}) (vector A (S x)).

Vector
 | A n :: (A : *) ~> ~ Nat ~> * => {(vector A n) :: |nil |cons}.

concat 
 | A n m k x y z :: (A : *) (n : Nat) (m : Nat) (k : Nat)
    ~ (Vector A n) ~> ~ (Vector A m) ~> ~ (Vector A k) ~> (Vector A k) => [z of (Vector A k)
   |(nil _) => (nil _)
   |(cons A pred head tail) => (cons A pred head tail) 
 ].
