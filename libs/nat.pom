import libs/equality.
import libs/logic.
import libs/bool.

Static nat : *.
Static 0 : nat.
Static +1 : ~ {nat :: | 0 | +1} ~> nat.

Nat
  {nat :: | 0 | +1}.

Succ 
  |x :: ~ Nat ~> {nat :: | +1} => (+1 x).

isSucc
  |n :: ~ Nat ~> * => [n of *
     |(+1 _) => Unit
     |0 => False
  ]. 

+ 
 | n y :: ~ Nat ~> ~ Nat ~> Nat => [n of Nat
  |0 => y
  |(+1 x) => (+1 (+ x y))
].

gte
  | x y :: ~ Nat ~> ~ Nat ~> Bool => [x of Bool
  |0 => [
    y of Bool
      |0 => true
      |(+1 x') => false
  ]
  |(+1 x') => [
    y of Bool
      |0 => true
      |(+1 y') => (gte x' y')
  ]
].

gt 
  | x y :: ~ Nat ~> ~ Nat ~> Bool => [x of Bool
  |0 => [
    y of Bool
      |0 => false
      |(+1 x') => false
  ]
  |(+1 x') => [
    y of Bool
      |0 => true
      |(+1 y') => (gt x' y')
  ]
].

eql 
 | x y :: ~ Nat ~> ~ Nat ~> Bool => [x of Bool
  |0 => [
    y of Bool
      |0 => true
      |(+1 x') => false
  ]
  |(+1 x') => [
    y of Bool
      |0 => false
      |(+1 y') => (eql x' y')
  ]
].

eql_prop
  | x y H :: (x : Nat) (y : Nat) ~ (Eq Bool (eql x y) true) ~> (Eq Nat x y) => 
  [x of (Eq Nat x y)
    |0 => [y of (Eq Nat x y)
       |0 => (refl Nat 0)
       |(+1 n) => (⊥ (Eq Nat x y) (false≠true (symmetry Bool false true H)))
    ]
    |(+1 n) => [y of (Eq Nat x y)
       |0 =>  (⊥ (Eq Nat x y) (false≠true (symmetry Bool false true H)))
       |(+1 n') => (cong Nat n n' Nat Succ (eql_prop n n' H))
    ]
  ].

zero_identity_plus' 
  | x :: (x : Nat) ~> {(≡ nat x (+ x 0)) :: |refl} => [x of {(≡ nat x (+ x 0)) :: |refl}
    |0 => (refl nat 0)
    |(+1 x') => (cong nat x' (+ x' 0) nat +1 (zero_identity_plus' x'))
   ].

left_succ_nat | x y :: (x : Nat) ~> (y : Nat) ~> {(≡ nat (+ x (+1 y)) (+1 (+ x y))) :: | refl } => 
  [x of {(≡ nat (+ x (+1 y)) (+1 (+ x y))) :: | refl}
    |0 => (refl nat (+1 y))
    |(+1 x') => (cong nat (+ x' (+1 y)) (+1 (+ x' y)) nat +1 (left_succ_nat x' y))
  ].

x+y≡y+x
 | x y :: (x : Nat) (y : Nat) * => {(≡ nat (+ x y) (+ y x)) :: | refl}.

+_com 
  | x y :: (x : Nat) (y : Nat) (x+y≡y+x x y) => [x of (x+y≡y+x x y)
    |0 => 
      def y≡y+0 = (zero_identity_plus' y);
      (rewrite' nat y y (+ y 0) (refl nat y) y≡y+0)
    |(+1 n) => 
       def x≡y→x+1≡y+1 = (cong nat (+ n y) (+ y n) nat +1 (+_com n y));
       def x+1+y≡x+y+1 = (symmetry nat (+ y (+1 n)) (+1 (+ y n)) (left_succ_nat y n));
       (rewrite' nat (+1 (+ n y)) (+1 (+ y n)) (+ y (+1 n)) x≡y→x+1≡y+1 x+1+y≡x+y+1)
  ].

unique_eql 
  | x :: (x : Nat) ~> (Eq Bool (eql x x) true) =>
    [x of (Eq Bool (eql x x) true)
      |0 => (refl Bool true)
      |(+1 n) => (unique_eql n)
    ].

eql_neg_prop
  | x y H H1 :: (x : Nat) (y : Nat) (H : (Eq Bool (eql x y) false)) (H1 : (Eq Nat x y)) ~> False => 
  [H1 of False
    |(refl _ 0) => (false≠true (rewrite' Bool true (eql x x) false (symmetry Bool (eql x x) true (unique_eql x)) H))
  ].

nat_dec
  |x y :: (x : Nat) (y : Nat) (Or (Eq Nat x y) (Negation (Eq Nat x y))) => [
  (eql x y) of (Or (Eq Nat x y) (Negation (Eq Nat x y)))
    |true => (or_right (Eq Nat x y) (Negation (Eq Nat x y)) (eql_prop x y (refl Bool true)))
    |false => (or_left (Eq Nat x y) (Negation (Eq Nat x y)) (Not (Eq Nat x y) (eql_neg_prop x y (refl Bool (eql x y)))))
].

gte_transitivy
  | x y 0 H H2 :: (x : Nat) (y : Nat) (0 : Nat)
     ~ (Eq Bool (gte x y) true) ~> ~ (Eq Bool (gte y 0) true) ~> (Eq Bool (gte x 0) true) => [x of (Eq Bool (gte x 0) true)
       |0 => [0 of (Eq Bool (gte x 0) true)
         |0 => (refl Bool true)
         |(+1 m) => [y of (Eq Bool (gte x 0) true)
           |0 => H2
           |(+1 n) => H
         ]
       ]
       |(+1 n) => [0 of (Eq Bool (gte x 0) true)
         |0 => (refl Bool true)
         |(+1 m) => [y of (Eq Bool (gte x 0) true)
           |0 => (⊥ (Eq Bool (gte x 0) true) (false≠true (symmetry Bool false true H2)))
           |(+1 +1) => (gte_transitivy n +1 m H H2)
         ]
       ]
     ].


gte_inverse 
  | x y H :: (x : Nat) (y : Nat) ~ (Eq Bool (gte x y) false) ~> (Eq Bool (gte y x) true) =>
    [x of (Eq Bool (gte y x) true)
      |0 => [y of (Eq Bool (gte y x) true)
        |0 => (refl Bool true)
        |(+1 n) => (refl Bool true)
      ]
      |(+1 n) => [y of (Eq Bool (gte y (+1 n)) true)
        |0 =>  (⊥ (Eq Bool (gte 0 (+1 n)) true) (false≠true H))
        |(+1 m) => (gte_inverse n m H)
      ]
  ]. 

1 
 (+1 0).

